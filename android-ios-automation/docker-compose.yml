version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
      - nlp-service
      - codegen-service
      - build-service
      - deployment-service
    networks:
      - app-network

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/auth:/app
    networks:
      - app-network

  # NLP Service
  nlp-service:
    build:
      context: ./services/nlp
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - redis
    volumes:
      - ./services/nlp:/app
    networks:
      - app-network

  # Code Generation Service
  codegen-service:
    build:
      context: ./services/codegen
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    depends_on:
      - postgres
      - minio
    volumes:
      - ./services/codegen:/app
      - ./templates:/app/templates
    networks:
      - app-network

  # Build Service
  build-service:
    build:
      context: ./services/build
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - ANDROID_SDK_PATH=${ANDROID_SDK_PATH}
    volumes:
      - ./services/build:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - postgres
    networks:
      - app-network

  # Deployment Service
  deployment-service:
    build:
      context: ./services/deployment
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - GOOGLE_PLAY_CREDENTIALS=${GOOGLE_PLAY_CREDENTIALS}
      - APP_STORE_ISSUER_ID=${APP_STORE_ISSUER_ID}
      - APP_STORE_KEY_ID=${APP_STORE_KEY_ID}
      - APP_STORE_PRIVATE_KEY=${APP_STORE_PRIVATE_KEY}
      - FIREBASE_SERVICE_ACCOUNT=${FIREBASE_SERVICE_ACCOUNT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - FASTLANE_USER=${FASTLANE_USER}
      - FASTLANE_PASSWORD=${FASTLANE_PASSWORD}
      - MATCH_PASSWORD=${MATCH_PASSWORD}
      - APPLE_DEVELOPER_TEAM_ID=${APPLE_DEVELOPER_TEAM_ID}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/deployment:/app
      - ./services/deployment/uploads:/app/uploads
    networks:
      - app-network

  # Testing Service
  testing-service:
    build:
      context: ./services/testing
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - postgres
    volumes:
      - ./services/testing:/app
    networks:
      - app-network

  # Monitoring Service
  monitoring-service:
    build:
      context: ./services/monitoring
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - MONGODB_URL=${MONGODB_URL}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres
      - mongodb
    volumes:
      - ./services/monitoring:/app
    networks:
      - app-network

  # Feedback Service
  feedback-service:
    build:
      context: ./services/feedback
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
    volumes:
      - ./services/feedback:/app
    networks:
      - app-network

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_URL=http://api-gateway
    volumes:
      - ./frontend:/app
    depends_on:
      - api-gateway
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=app_automation
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network

  # MongoDB for Logs
  mongodb:
    image: mongo:6
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - app-network

  # MinIO for Object Storage
  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - app-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - app-network

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  minio_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge